/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/meter-readings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 15 minutni merilni podatki in dnevna stanja
         * @description 15 minutni merilni podatki in dnevna stanja v CIM strukturi. Podrobni opisi posameznih registrov po katerih se lahko povprašuje se dobijo z metodo GET /reading-type.
         */
        get: operations["getMeterReadings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/merilno-mesto/{identifikator}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Podatki merilnega mesta
         * @description Podatki o merilnem mestu s tehničnimi podrobnostmi
         */
        get: operations["getMerilnoMesto"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/merilna-tocka/{gsrn}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Podatki merilne točke
         * @description Pogodbeni podatki o merilni točki (plačnik, naslovnik, dobavitelj, ...)
         */
        get: operations["getMerilnaTocka"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reading-qualities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getReadingQualities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reading-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getReadingTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Enotni identifikator merilnega mesta */
        Gsrn: string;
        /** @description Tip odčitka */
        ReadingTypeValue: string;
        ReadingTypes: components["schemas"]["ReadingType"][];
        ReadingType: {
            /** @description Naziv */
            naziv?: string;
            /** @description Oznaka */
            oznaka?: string;
            /** @description Tip */
            tip?: string;
            /** @description Perioda */
            perioda?: string;
            /** @description Opis */
            opis?: string;
            readingType?: components["schemas"]["ReadingTypeValue"];
            readingTypeBrezObracuna?: components["schemas"]["ReadingTypeValue"];
            readingTypeObracun?: components["schemas"]["ReadingTypeValue"];
            vrsta?: components["schemas"]["ReadingTypeValueType"];
        };
        /** @enum {string} */
        ReadingTypeValueType: "KOLICINA" | "STANJE";
        /** @description Vrednost odčitka */
        ReadingValue: string;
        ReadingQualityType: string;
        /** @description Status odčitka. Opisi posameznih statusov so na voljo v metodi GET /reading-qualities. */
        ReadingQuality: {
            readingQualityType?: components["schemas"]["ReadingQualityType"];
        };
        ReadingQualityWithDescription: {
            /** @description Opis statusa odčitka */
            description?: string;
        } & components["schemas"]["ReadingQuality"];
        /** @description Seznam statusov odčitka. V kolikor je seznam prazen ali ni prisoten, se odčitek smatra kot validen. */
        ReadingQualities: components["schemas"]["ReadingQualityWithDescription"][];
        /**
         * Format: date
         * @description Časovna značka za datum ISO oblike
         * @example 2023-19-12
         */
        Date: string;
        /**
         * Format: date-time
         * @description Časovna značka ISO oblike z odmikom časovne cone
         * @example 2023-12-19 00:00:15+02:00
         */
        DateTime: string;
        Options: components["schemas"]["Option"][];
        /** @description Vrednost ReadingType po katerem se povprašuje */
        Option: string;
        /** @description Odčitek */
        IntervalReading: {
            /**
             * Format: date-time
             * @description Časovna značka odčitka
             */
            timestamp?: string;
            value?: components["schemas"]["ReadingValue"];
            /** @description Seznam statusov odčitka */
            readingQualities?: components["schemas"]["ReadingQuality"][];
        };
        /** @description Časovni blok za posamezni register */
        IntervalBlock: {
            readingType?: components["schemas"]["ReadingTypeValue"];
            /** @description Seznam odčitkov */
            intervalReadings?: components["schemas"]["IntervalReading"][];
        };
        /** @description Vrednosti meritev */
        MeterReadings: {
            usagePoint?: components["schemas"]["Gsrn"];
            /**
             * Format: date-time
             * @description Časovna značka kreiranja sporočila
             */
            messageCreated?: string;
            /** @description Seznam časovnih blokov za posamezni register */
            intervalBlocks?: components["schemas"]["IntervalBlock"][];
        };
        /** @description Podatki poslovnega partnerja */
        PoslovniPartner: {
            /** @description Naziv poslovnega partnerja */
            naziv?: string;
            /** @description Davčna št. poslovnega partnerja */
            davcnaSt?: string;
            /** @description Matična št. poslovnega partnerja */
            maticnaSt?: string;
            /** @description Naslov poslovnega partnerja */
            naslov?: string;
        };
        /**
         * @description Vrsta merilne točke
         * @enum {string}
         */
        VrstaMerilneTocke: "OMTO" | "MTP";
        /** @description Enotni identifikator merilnega mesta */
        EnotniIdentifikatorMerilnegaMesta: string;
        /** @description Identifikator merilnega mesta */
        IdentifikatorMerilnegaMesta: {
            enotniIdentifikatorMerilnegaMesta?: components["schemas"]["EnotniIdentifikatorMerilnegaMesta"];
            gsrn?: components["schemas"]["Gsrn"];
        };
        Decimal: string;
        /** @description Podatki merilnega mesta */
        MerilnoMesto: {
            identifikator?: components["schemas"]["IdentifikatorMerilnegaMesta"];
            merilneTocke?: components["schemas"]["MerilnaTocka"][];
        };
        /** @description Podatki merilnega mesta */
        MerilnoMestoPolno: components["schemas"]["MerilnoMesto"] & {
            /** @description Naziv merilnega mesta */
            naziv?: string;
            /** @description Naslov merilnega mesta */
            naslov?: string;
            /** @description Točka priključitve */
            tockaPrikljucitve?: components["schemas"]["TockaPrikljucitve"];
            /** @description Pogodbeni podatki */
            pogodbeniPodatki?: components["schemas"]["PogodbeniPodatki"];
            /** @description Lastnik merilnega mesta */
            lastnik?: components["schemas"]["PoslovniPartner"];
            /** @description Tehnični podatki merilnega mesta */
            tehnicniPodatki?: components["schemas"]["TehnicniPodatki"];
        };
        /** @description Točka priključitve merilnega mesta */
        TockaPrikljucitve: {
            /** @description RTP */
            rtp?: string;
            /** @description SN izvod */
            sn?: string;
            /** @description TP */
            tp?: string;
            /** @description NN izvod */
            nn?: string;
        };
        /** @description Pogodbeni podatki merilnega mesta */
        PogodbeniPodatki: {
            /** @description Št. soglasja za priklop */
            stevilkaSzP?: number;
            /** @description Naziv napetostnega nivoja */
            nazivNapetostnegaNivoja?: string;
            /** @description Oznaka napetnostnega nivoja */
            oznakaNapetostnegaNivoja?: string;
            /** @description Naziv načina priključitve */
            nazivNacinaPrikljucitve?: string;
            /** @description Oznaka načina priključitve */
            oznakaNacinaPrikljucitve?: number;
            /** @description Vrsta priključka */
            vrstaPrikljucka?: string;
            /** @description Št. faz */
            steviloFaz?: number;
            /** @description Vrsta omejevalca toka */
            vrstaOmejevalcaToka?: string;
            /** @description Identifikator vrste omejevalca toka */
            idVrsteOmejevalcaToka?: number;
            /** @description Jakost omejevalca toka */
            jakostOmejevalcaToka?: number;
            /** @description Priključna moč */
            prikljucnaMoc?: number;
            /** @description Instalirana moč proizvodnje */
            instaliranaMocProizvodnje?: components["schemas"]["Decimal"];
            /** @description Vir primarnega energenta (vir energije) za proizvajalce */
            virPrimarnegaEnergenta?: string;
            /** @description Zastavica, ali je merilno mesto na daljinskem odbiranju */
            daljinskoCitanje?: boolean;
            /** @description Zastavica, ali ima merilno mesto 15 minutne meritve */
            obstoj15MinutneMeritve?: boolean;
            /** @description Identifikator frekvence odbiranja */
            idFrekvenceOdbiranja?: number;
            /** @description Naziv frekvence odbiranja */
            nazivFrekvenceOdbiranja?: string;
            /** @description Mesec obračuna */
            mesecObracuna?: number;
        };
        /** @description Tehnični podatki merilnega mesta */
        TehnicniPodatki: {
            /** @description Naziv tipa števca */
            tipStevca?: string;
            /** @description Oznaka statistične populacije */
            statisticnaPopulacija?: string;
            /** @description Tovarniška številka števca */
            tovarniskaStevilkaMkn?: string;
            /** @description Velikost populacije */
            velikostPopulacije?: number;
            /** @description Leto izdelave števca */
            letoIzdelave?: number;
            /** @description Zaporedna številka preizkusa */
            zaporednaStPreizkusa?: number;
            /** @description Datum veljavnosti žiga */
            datumVeljavnostiZiga?: components["schemas"]["Date"];
        };
        /** @description Podatki merilne točke */
        MerilnaTocka: {
            gsrn?: components["schemas"]["Gsrn"];
            vrsta?: components["schemas"]["VrstaMerilneTocke"];
        };
        MerilnaTockaPolno: components["schemas"]["MerilnaTocka"] & {
            /** @description Naziv merilne točke */
            naziv?: string;
            vrsta?: components["schemas"]["VrstaMerilneTocke"];
            dobavitelj?: components["schemas"]["Dobavitelj"];
            /** @description Zastavica, ali se na merilni točki obračunavajo izgube */
            obracunIzgub?: boolean;
            /** @description Procent izgub */
            procentIzgub?: number;
            /** @description Št. tarif merjenja */
            steviloTarifMerjenja?: number;
            /** @description Letne obratovalne ure */
            letneObratovalneUre?: number;
            /** @description Plačnik ali prodajalec na merlni točki */
            placnikAliProdajalec?: components["schemas"]["PoslovniPartner"];
            /** @description Naslovnik na merilni točki */
            naslovnik?: components["schemas"]["PoslovniPartner"];
            /** @description Obračunska (priključna) moč */
            obracunskaMoc?: number;
            /** @description Način obračuna */
            nacinObracuna?: components["schemas"]["NacinObracuna"];
            /** @description Identifikator vrste odjema */
            idVrstaOdjema?: number;
            /** @description Naziv vrste odjema */
            nazivVrstaOdjema?: string;
            /** @description Št. pogodbe o uporabi sistema */
            stPogodbeOUporabiSistema?: string;
            /** @description Način oskrbe */
            nacinOskrbe?: string;
            /** @description Seznam dogovorjenih moči */
            dogovorjeneMoci?: components["schemas"]["DogovorjenaMoc"][];
            /** @description Seznam merilnih mest, ki so udeležene v tej merilni točki */
            merilnaMesta?: components["schemas"]["MerilnoMesto"][];
        };
        /** @description Podatki dogovorjene moči */
        DogovorjenaMoc: {
            /** @description Datum vnosa dogovorjene moči */
            datumVnosa?: components["schemas"]["Date"];
            /** @description Datum začetka dogovorjene moči */
            datumOd?: components["schemas"]["DateTime"];
            /** @description Datum konca dogovorjene moči */
            datumDo?: components["schemas"]["DateTime"];
            /** @description Način določitve dogovorjene moči */
            nacinDolocitve?: components["schemas"]["NacinDolocitveDogovorjeneMoci"];
            /** @description Oznaka izračuna dogovorjene moči */
            oznakaIzracuna?: components["schemas"]["OznakaIzracunaDogovorjeneMoci"];
            /** @description Vrednost dogovorjene moči v časovnem bloku 1 */
            casovniBlok1?: components["schemas"]["Decimal"];
            /** @description Vrednost dogovorjene moči v časovnem bloku 2 */
            casovniBlok2?: components["schemas"]["Decimal"];
            /** @description Vrednost dogovorjene moči v časovnem bloku 3 */
            casovniBlok3?: components["schemas"]["Decimal"];
            /** @description Vrednost dogovorjene moči v časovnem bloku 4 */
            casovniBlok4?: components["schemas"]["Decimal"];
            /** @description Vrednost dogovorjene moči v časovnem bloku 5 */
            casovniBlok5?: components["schemas"]["Decimal"];
            /** @description Veljavnost dogovorjene moči */
            veljavnost?: boolean;
            /** @description Indikator, ali gre za novega uporabnika */
            novUporabnik?: boolean;
            /** @description Priključna moč, na podlagi katere je bila izračunana dogovorjena moč */
            prikljucnaMoc?: components["schemas"]["Decimal"];
            /** @description Vrednost minimalne moči */
            minimalnaMoc?: components["schemas"]["Decimal"];
        };
        /**
         * @description Način določitve dogovorjene moči
         * @enum {string}
         */
        NacinDolocitveDogovorjeneMoci: "DISTRIBUTER" | "UPORABNIK";
        /**
         * @description Oznaka izračuna dogovorjene moči
         * @enum {string}
         */
        OznakaIzracunaDogovorjeneMoci: "M0" | "M1";
        /** @enum {string} */
        NacinObracuna: "PREDVIDENA_PORABA" | "DEJANSKA_PORABA";
        OznakaDobavitelja: number;
        Eic: string;
        /** @description Dobavitelj električne energije za merilno točko */
        Dobavitelj: {
            oznaka?: components["schemas"]["OznakaDobavitelja"];
            eic?: components["schemas"]["Eic"];
            naziv?: string;
            /** Format: date */
            datumOd?: string;
            /** Format: date */
            datumDo?: string;
        };
        /** @description Opis napake */
        OpisNapake: {
            /** @description Identifikator zahteve */
            zahteva?: string;
            /** @description Seznam napak */
            errors?: components["schemas"]["Napaka"][];
        };
        /** @description Opis in koda napake */
        Napaka: {
            koda?: components["schemas"]["KodaNapake"];
            /** @description Opis napake */
            opis?: string;
        };
        /** @description Koda napake */
        KodaNapake: string;
    };
    responses: {
        /** @description Odgovor za meritve */
        MeterReadingsResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["MeterReadings"];
            };
        };
        /** @description Vsebuje podatke merilnega mesta */
        MerilnoMestoResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["MerilnoMestoPolno"];
            };
        };
        /** @description Vsebuje podatke merilne tocke */
        MerilnaTockaResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["MerilnaTockaPolno"];
            };
        };
        /** @description Sifrant zaloge vrednosti za ReadingQualities */
        ReadingQualitiesResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ReadingQualities"];
            };
        };
        /** @description Sifrant zaloge vrednosti za ReadingType */
        ReadingTypesResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ReadingTypes"];
            };
        };
        /** @description Napaka v vhodnih parametrih */
        InvalidParametersErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Napaka"];
            };
        };
        /** @description Manjkajo avtorizacijski podatki */
        AuthorizationRequiredErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Napaka"];
            };
        };
        /** @description Podani avtorizacijski podatki ne omogocajo dostopa */
        NotAuthorizedErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Napaka"];
            };
        };
        /** @description Podatki niso bili najdeni */
        NotFoundResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Napaka"];
            };
        };
    };
    parameters: {
        /** @description Enotni identifikator merilnega mesta */
        UsagePoint: components["schemas"]["Gsrn"];
        /** @description Datum začetka intervala povpraševanja v obliki LLLL-MM-DD */
        StartTime: components["schemas"]["Date"];
        /** @description Datum konca intervala povpraševanja v obliki LLLL-MM-DD */
        EndTime: components["schemas"]["Date"];
        /** @description Seznam registrov po katerih se povprašuje. Posamezni register se vnese v obliki: ReadingType=32.0.2.4.1.2.12.0.0.0.0.0.0.0.0.3.72.0 */
        Option: components["schemas"]["Options"];
        /** @description Identifikator merilnega mesta */
        Identifikator: string;
        /** @description GSRN merilne točke */
        GsrnMerilneTocke: components["schemas"]["Gsrn"];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getMeterReadings: {
        parameters: {
            query?: {
                /** @description Enotni identifikator merilnega mesta */
                usagePoint?: components["parameters"]["UsagePoint"];
                /** @description Datum začetka intervala povpraševanja v obliki LLLL-MM-DD */
                startTime?: components["parameters"]["StartTime"];
                /** @description Datum konca intervala povpraševanja v obliki LLLL-MM-DD */
                endTime?: components["parameters"]["EndTime"];
                /** @description Seznam registrov po katerih se povprašuje. Posamezni register se vnese v obliki: ReadingType=32.0.2.4.1.2.12.0.0.0.0.0.0.0.0.3.72.0 */
                option?: components["parameters"]["Option"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["MeterReadingsResponse"];
            400: components["responses"]["InvalidParametersErrorResponse"];
            401: components["responses"]["AuthorizationRequiredErrorResponse"];
            403: components["responses"]["NotAuthorizedErrorResponse"];
        };
    };
    getMerilnoMesto: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifikator merilnega mesta */
                identifikator: components["parameters"]["Identifikator"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["MerilnoMestoResponse"];
            400: components["responses"]["InvalidParametersErrorResponse"];
            401: components["responses"]["AuthorizationRequiredErrorResponse"];
            403: components["responses"]["NotAuthorizedErrorResponse"];
            404: components["responses"]["NotFoundResponse"];
        };
    };
    getMerilnaTocka: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description GSRN merilne točke */
                gsrn: components["parameters"]["GsrnMerilneTocke"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["MerilnaTockaResponse"];
            400: components["responses"]["InvalidParametersErrorResponse"];
            401: components["responses"]["AuthorizationRequiredErrorResponse"];
            403: components["responses"]["NotAuthorizedErrorResponse"];
            404: components["responses"]["NotFoundResponse"];
        };
    };
    getReadingQualities: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ReadingQualitiesResponse"];
            401: components["responses"]["AuthorizationRequiredErrorResponse"];
            403: components["responses"]["NotAuthorizedErrorResponse"];
        };
    };
    getReadingTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ReadingTypesResponse"];
            401: components["responses"]["AuthorizationRequiredErrorResponse"];
            403: components["responses"]["NotAuthorizedErrorResponse"];
        };
    };
}
